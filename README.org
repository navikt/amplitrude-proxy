* Ampritude-proxy

  ┌─────────────┐
  │ Client      │
  │ (Downstream)│
  └────┬────────┘
  ┌────┴────────┐
  │ This proxy  │
  │             │
  └────┬────────┘
  ┌────┴────────┐
  │ Amplitude   │
  │ (Upstream)  │
  └─────────────┘

A reverse.proxy in front of Amplitude. It redacts some data from
requests and annotates requests with other data before sending it
upstream. Responses from the upstream are left intact.

This tries to be, morally, a reverse proxy and not a
custom ingestion service. As such, we try to avoid a having (much
specific) knowledge about upstreams and downstreams.

** Development
1. Nix supplies all the tooling. You can build with

#+BEGIN_SRC sh
  nix build
#+END_SRC

and get a development environment with
#+BEGIN_SRC sh
  nix develop
#+END_SRC

*** How to Run Locally

1. Start an echo server of your choice, here we use socat for no
   particular reason:
   - you could consider mccutchen/go-http-bin or similar.

   #+BEGIN_SRC sh
   socat -v -d -d tcp-l:1234,crlf,reuseaddr,fork system:"
   echo HTTP/1.1 200 OK;
   echo Content-Type\: text/plain;
   echo;
   echo \"Server: \$SOCAT_SOCKADDR:\$SOCAT_SOCKPORT\";
   echo \"Client: \$SOCAT_PEERADDR:\$SOCAT_PEERPORT\";
   "
   socat -v tcp-l:1234,fork exec:"'$(realpath cat)'"
   #+END_SRC

2. Start the program, you need to set amplitude envs first.
   #+BEGIN_SRC sh
   cargo run
   #+END_SRC

3. You can now send requests to the service at 6191 and get forwarded
   requests on the service you pointed the proxy at.
